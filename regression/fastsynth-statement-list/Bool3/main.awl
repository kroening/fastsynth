﻿FUNCTION "EXPRESSIONa" : Bool
VERSION : 0.1
   VAR_INPUT 
      parameter0 : Bool;
      parameter1 : Bool;
      parameter2 : Bool;
      parameter3 : Bool;
   END_VAR

BEGIN
END_FUNCTION

﻿FUNCTION "EXPRESSIONb" : Bool
VERSION : 0.1
   VAR_INPUT 
      parameter0 : Bool;
      parameter1 : Bool;
      parameter2 : Bool;
   END_VAR

BEGIN
END_FUNCTION

FUNCTION "EXPRESSIONc" : Bool
VERSION : 0.1
   VAR_INPUT 
      parameter0 : Bool;
      parameter1 : Bool;
      parameter2 : Bool;
      parameter3 : Bool;
   END_VAR

BEGIN
END_FUNCTION

﻿FUNCTION "EXPRESSIONd" : Bool
VERSION : 0.1
   VAR_INPUT 
      parameter0 : Bool;
      parameter1 : Bool;
      parameter2 : Bool;
   END_VAR

BEGIN
END_FUNCTION

FUNCTION_BLOCK "Main"
VERSION : 0.1
   VAR_TEMP 
      temp1 : Bool;
      return : Bool;
   END_VAR

BEGIN
NETWORK
TITLE = 
      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := FALSE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := FALSE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := TRUE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := TRUE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := FALSE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := FALSE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := TRUE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := TRUE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := FALSE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := FALSE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := TRUE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := TRUE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := FALSE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := FALSE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := TRUE, 
        parameter3 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONa" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := TRUE, 
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

NETWORK
TITLE = 
      CALL "EXPRESSIONb" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONb" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

NETWORK
TITLE = 
      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        parameter3 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        parameter3 := FALSE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := FALSE,
        parameter3 := FALSE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        parameter3 := FALSE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := FALSE,
        parameter3 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        parameter3 := FALSE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONc" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        parameter3 := FALSE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

NETWORK
TITLE = 
      CALL "EXPRESSIONd" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := FALSE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := FALSE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := TRUE, 
        parameter1 := FALSE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := FALSE,
        Ret_Val := #return );
      AN #return;
      = #return;
      CALL "__CPROVER_assert" (condition := #return);

      CALL "EXPRESSIONd" 
      ( parameter0 := TRUE, 
        parameter1 := TRUE, 
        parameter2 := TRUE,
        Ret_Val := #return );
      CALL "__CPROVER_assert" (condition := #return);

END_FUNCTION_BLOCK
